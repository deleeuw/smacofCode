smacofGuttmanUnrestricted <- function(zgut, dhat, wmat, itmax, eps, verbose, xnorm) {
  nvar <- length(wmat)
  nobj <- nrow(dhat[[1]])
  ndim <- ncol(zgut$xgut[[1]])
  wtot <- rep(0, nobj)
  wrow <- lapply(wmat, rowSums)
  wcol <- lapply(wmat, colSums)
  ytil <- zgut$ygut
  xtil <- zgut$xgut
  yold <- ytil
  xold <- matrix(0, nobj, ndim)
  for (j in 1:nvar) {
    wtot <- wtot + wrow[[j]]
    xold <- xold + wrow[[j]] * xtil[[j]]
  }
  wtot <- ifelse(wtot == 0, 1, wtot)
  xold <- xold / wtot
  oold <- 0.0
  for (j in 1:nvar) {
    xdif <- xold - xtil[[j]]
    ydif <- yold[[j]] - ytil[[j]]
    oold <- oold + sum(wrow[[j]] * (xdif ^ 2))
    oold <- oold + sum(wcol[[j]] * (ydif ^ 2))
    oold <- oold - 2 * sum(xdif * (wmat[[j]] %*% ydif))
  }
  dmat <- smacofDistancesHO(xold, yold)
  sold <- smacofStressHO(dmat, dhat, wmat)
  itel <- 1
  repeat {
    xnew <- matrix(0, nobj, ndim)
    for (j in 1:nvar) {
      xcor <- wmat[[j]] %*% (yold[[j]] - ytil[[j]])
      xnew <- xnew + wrow[[j]] * xtil[[j]] + xcor
    }
    if (xnorm == 2) {
      crsx <- crossprod(xnew, xnew / wtot)
      lbdx <- eigen(crsx)
      kbdx <- lbdx$vectors
      ebdx <- abs(lbdx$values)
      ebdx <- ifelse(ebdx == 0, 0, 1 / sqrt(ebdx))
      lagx <- tcrossprod(kbdx %*% diag(ebdx), kbdx)
      xnew <- (xnew %*% lagx) / wtot
    } else {
      xnew <- xnew / wtot
    }
    ynew <- as.list(1:nvar)
    for (j in 1:nvar) {
      ycor <- crossprod(wmat[[j]], xnew - xtil[[j]])
      ynew[[j]] <- ytil[[j]] +  ycor / pmax(1, wcol[[j]])
    }
    dmat <- smacofDistancesHO(xnew, ynew)
    snew <- smacofStressHO(dmat, dhat, wmat)
    onew <- 0.0
    for (j in 1:nvar) {
      xdif <- xnew - xtil[[j]]
      ydif <- ynew[[j]] - ytil[[j]]
      onew <- onew + sum(wrow[[j]] * (xdif ^ 2))
      onew <- onew + sum(wcol[[j]] * (ydif ^ 2))
      onew <- onew - 2 * sum(xdif * (wmat[[j]] %*% ydif))
    }
    if (verbose) {
      cat(
        "xtel ",
        formatC(itel, format = "d"),
        "oold ",
        formatC(oold, digits = 10, format = "f"),
        "onew ",
        formatC(onew, digits = 10, format = "f"),
        "sold ",
        formatC(sold, digits = 10, format = "f"),
        "snew ",
        formatC(snew, digits = 10, format = "f"),
        "\n"
      )
    }
    if ((itel == itmax) || ((oold - onew) < eps)) {
      break
    }
    oold <- onew
    sold <- snew
    xold <- xnew
    yold <- ynew
    itel <- itel + 1
  }
  return(list(xnew = xnew, ynew = ynew))
}

smacofGuttmanCentroid <- function(zgut, gind, dmar, umat, urhs, xnorm) {
  nvar <- length(urhs)
  nobj <- nrow(zgut$xgut[[1]])
  ndim <- ncol(zgut$xgut[[1]])
  ynew <- as.list(1:nvar)
  xcen <- matrix(0, nobj, ndim)
  for (j in 1:nvar) {
    zbnd <- rbind(zgut$xgut[[j]], zgut$ygut[[j]])
    xcen <- xcen + urhs[[j]] %*% zbnd
  }
  if (xnorm) {
    crsx <- crossprod(xcen, umat %*% xcen)
    lbdx <- eigen(crsx)
    kbdx <- lbdx$vectors
    ebdx <- abs(lbdx$values)
    ebdx <- ifelse(ebdx == 0, 0, 1 / sqrt(ebdx))
    lagx <- tcrossprod(kbdx %*% diag(ebdx), kbdx)
    xnew <- umat %*% xcen %*% lagx
  } else {
    xnew <- umat %*% xcen
  }
  for (j in 1:nvar) {
    ynew[[j]] <- crossprod(gind[[j]], xnew) / dmar[[j]]
  }
  return(list(xnew = xnew, ynew = ynew))
}

smacofGuttmanSingle <- function(zgut, dhat, wmat, itmax, eps, verbose, xnorm) {
  nvar <- length(wmat)
  nobj <- nrow(dhat[[1]])
  ndim <- ncol(zgut$xgut[[1]])
  wtot <- rep(0, nobj)
  wrow <- lapply(wmat, rowSums)
  wcol <- lapply(wmat, colSums)
  ytil <- zgut$ygut
  xtil <- zgut$xgut
  yold <- ytil
  xold <- matrix(0, nobj, ndim)
  for (j in 1:nvar) {
    wtot <- wtot + wrow[[j]]
    xold <- xold + wrow[[j]] * xtil[[j]]
  }
  wtot <- ifelse(wtot == 0, 1, wtot)
  xold <- xold / wtot
  oold <- 0.0
  for (j in 1:nvar) {
    xdif <- xold - xtil[[j]]
    ydif <- yold[[j]] - ytil[[j]]
    oold <- oold + sum(wrow[[j]] * (xdif ^ 2))
    oold <- oold + sum(wcol[[j]] * (ydif ^ 2))
    oold <- oold - 2 * sum(xdif * (wmat[[j]] %*% ydif))
  }
  dmat <- smacofDistancesHO(xold, yold)
  sold <- smacofStressHO(dmat, dhat, wmat)
  itel <- 1
  repeat {
    xnew <- matrix(0, nobj, ndim)
    for (j in 1:nvar) {
      xcor <- wmat[[j]] %*% (yold[[j]] - ytil[[j]])
      xnew <- xnew + wrow[[j]] * xtil[[j]] + xcor
    }
    if (xnorm) {
      crsx <- crossprod(xnew, xnew / wtot)
      lbdx <- eigen(crsx)
      kbdx <- lbdx$vectors
      ebdx <- abs(lbdx$values)
      ebdx <- ifelse(ebdx == 0, 0, 1 / sqrt(ebdx))
      lagx <- tcrossprod(kbdx %*% diag(ebdx), kbdx)
      xnew <- (xnew %*% lagx) / wtot
    } else {
      xnew <- xnew / wtot
    }
    ynew <- as.list(1:nvar)
    for (j in 1:nvar) {
      mcor <- wcol[[j]] * ytil[[j]] + crossprod(wmat[[j]], xnew - xtil[[j]])
      ccor <- crossprod(mcor, mcor / wcol[[j]])
      acor <- eigen(ccor)$vectors[, 1]
      ycor <- drop(mcor %*% acor) / wcol[[j]]
      ynew[[j]] <- outer(ycor, acor)
    }
    dmat <- smacofDistancesHO(xnew, ynew)
    snew <- smacofStressHO(dmat, dhat, wmat)
    onew <- 0.0
    for (j in 1:nvar) {
      xdif <- xnew - xtil[[j]]
      ydif <- ynew[[j]] - ytil[[j]]
      onew <- onew + sum(wrow[[j]] * (xdif ^ 2))
      onew <- onew + sum(wcol[[j]] * (ydif ^ 2))
      onew <- onew - 2 * sum(xdif * (wmat[[j]] %*% ydif))
    }
    if (verbose) {
      cat(
        "xtel ",
        formatC(itel, format = "d"),
        "oold ",
        formatC(oold, digits = 10, format = "f"),
        "onew ",
        formatC(onew, digits = 10, format = "f"),
        "sold ",
        formatC(sold, digits = 10, format = "f"),
        "snew ",
        formatC(snew, digits = 10, format = "f"),
        "\n"
      )
    }
    if ((itel == itmax) || ((oold - onew) < eps)) {
      break
    }
    oold <- onew
    sold <- snew
    xold <- xnew
    yold <- ynew
    itel <- itel + 1
  }
  return(list(xnew = xnew, ynew = ynew))
}
