
smacofGuttmanTransform <- function(wmat, bmat, xold, yold, ndim, ncat) {
  nvar <- length(wmat)
  nobj <- nrow(wmat[[1]])
  ygut <- lapply(1:nvar, function(j) matrix(0, ncat[j], ndim))
  xgut <- lapply(1:nvar, function(j) matrix(0, nobj, ndim))
  for (j in 1:nvar) {
    rw <- rowSums(wmat[[j]])
    rw <- ifelse(rw == 0, 1, rw)
    cw <- colSums(wmat[[j]])
    rb <- rowSums(bmat[[j]])
    cb <- colSums(bmat[[j]])
    nc <- length(cw)
    umat <- rb * xold - bmat[[j]] %*% yold[[j]]
    vmat <- cb * yold[[j]] - crossprod(bmat[[j]], xold)
    smat <- diag(cw) - crossprod(wmat[[j]], wmat[[j]] / rw)
    sinv <- solve(smat + (1 / nc)) - (1 / nc)
    rhsy <- vmat + crossprod(wmat[[j]], umat / rw)
    ygut[[j]] <- sinv %*% rhsy
    xgut[[j]] <- (umat + wmat[[j]] %*% ygut[[j]]) / rw
  }
  return(list(xgut = xgut, ygut = ygut))
}

smacofGuttmanLoopHO <-
  function(gind,
           dmar,
           itel,
           kitmax,
           keps,
           kverbose,
           xitmax,
           xeps,
           xverbose,
           xold,
           yold,
           wmat,
           dhat,
           dmat,
           ndim,
           ncat,
           xnorm,
           yform) {
    ktel <- 1
    sold <- smacofStressHO(dmat, dhat, wmat)
    repeat {
      bmat <- smacofMakeBmatHO(dmat, dhat, wmat)
      zgut <- smacofGuttmanTransform(wmat, bmat, xold, yold, ndim, ncat)
      xtel <- 1
      repeat {
        ynew <- smacofUpdateCategoryScores(zgut, wmat, xold, yform, ncat)
        xnew <- smacofUpdateObjectScores(zgut, ynew, wmat, ndim, xnorm)
        dmat <- smacofDistancesHO(xnew, ynew)
        snew <- smacofStressHO(dmat, dhat, wmat)
        if (xverbose) {
          cat(
            "itel ",
            formatC(itel, width = 3, format = "d"),
            "ktel ",
            formatC(ktel, width = 3, format = "d"),
            "xtel ",
            formatC(xtel, width = 3, format = "d"),
            "sold ",
            formatC(sold, digits = 10, format = "f"),
            "snew ",
            formatC(snew, digits = 10, format = "f"),
            "\n"
          )
        }
        if ((xtel == xitmax) || ((sold - snew) < xeps)) {
          break
        }
        xold <- xnew
        sold <- snew
        xtel <- xtel + 1
      }
      if (kverbose) {
        cat(
          "itel ",
          formatC(itel, width = 3, format = "d"),
          "ktel ",
          formatC(ktel, width = 3, format = "d"),
          "sold ",
          formatC(sold, digits = 10, format = "f"),
          "snew ",
          formatC(snew, digits = 10, format = "f"),
          "\n"
        )
      }
      if ((ktel == kitmax) || ((sold - snew) < keps)) {
        break
      }
      ktel <- ktel + 1
      sold <- snew
      xold <- xnew
      yold <- ynew
    }
    return(list(xnew = xnew,
                ynew = ynew,
                dmat = dmat,
                snew = snew))
  }

smacofNormObjectScores <- function(pmat, wtot, xnorm) {
  crsx <- crossprod(pmat, pmat / wtot)
  if (xnorm == 1) {
    xnew <- (pmat / wtot) / sqrt(sum(diag(crsx)))
  } else {
    lbdx <- eigen(crsx)
    kbdx <- lbdx$vectors
    ebdx <- abs(lbdx$values)
    ebdx <- ifelse(ebdx == 0, 0, 1 / sqrt(ebdx))
    lagx <- tcrossprod(kbdx %*% diag(ebdx), kbdx)
    xnew <- (pmat %*% lagx) / wtot
  }
  return(xnew)
}

# only for yform = 0 or yform = 1

smacofUpdateCategoryScores <- function(zgut, wmat, xold, yform, ncat) {
  nvar <- length(wmat)
  wcol <- lapply(wmat, colSums)
  ndim <- ncol(xold)
  ytil <- zgut$ygut
  xtil <- zgut$xgut
  ynew <- lapply(1:nvar, function(j) matrix(0, ncat[j], ndim))
  for (j in 1:nvar) {
     if (yform[j] == 0) {
      ycor <- crossprod(wmat[[j]], xold - xtil[[j]])
      ynew[[j]] <- ytil[[j]] +  ycor / pmax(1, wcol[[j]])
    }
    if (yform[j] == 1) {
      mcor <- wcol[[j]] * ytil[[j]] + crossprod(wmat[[j]], xold - xtil[[j]])
      ccor <- crossprod(mcor, mcor / wcol[[j]])
      acor <- eigen(ccor)$vectors[, 1]
      ycor <- drop(mcor %*% acor) / wcol[[j]]
      ynew[[j]] <- outer(ycor, acor)
    }
  }
  return(ynew)
}

smacofUpdateObjectScores <- function(zgut, ynew, wmat, ndim, xnorm) {
  nvar <- length(wmat)
  nobj <- nrow(wmat[[1]])
  wrow <- lapply(wmat, rowSums)
  wtot <- rep(0, nobj)
  ytil <- zgut$ygut
  xtil <- zgut$xgut
  pmat <- matrix(0, nobj, ndim)
  for (j in 1:nvar) {
    xcor <- wmat[[j]] %*% (ynew[[j]] - ytil[[j]])
    pmat <- pmat + wrow[[j]] * xtil[[j]] + xcor
    wtot <- wtot + wrow[[j]]
  }
  if (xnorm == 0) {
    xnew <- pmat / wtot
  } else {
    xnew <- smacofNormObjectScores(pmat, wtot, xnorm)
  } 
}


smacofUpdateCentroidOption <- function(zgut, wmat, xold, yform, ncat) {
  # loop over yform = 2
  # use zgut to compute Q
  # compute PXold
  
  
}
# yform and xnorm as vectors with length nvar (0, 1, 2)
# majorization for centroid 
# prediction table

suppressPackageStartupMessages(library(dismo, quietly = TRUE))
suppressPackageStartupMessages(library(mgcv, quietly = TRUE))

source("smacofMonotoneRegressionHO.R")
source("smacofHomogeneityHO.R")
source("smacofInitCategoryHO.R")
source("smacofGuttmanTransformHO.R")
source("smacofUtilitiesHO.R")
source("smacofPlotsHO.R")

smacofHO <- function(thedata,
                     wmat = NULL,
                     ndim = 2,
                     itmax = 10000,
                     eps = 1e-10,
                     verbose = TRUE,
                     xitmax = 50,
                     xeps = 1e-10,
                     xverbose = FALSE,
                     kitmax = 5,
                     keps = 1e-6,
                     kverbose = FALSE,
                     yform = 0,
                     xnorm = 0) {
  nobj <- nrow(thedata)
  nvar <- ncol(thedata)
  gind <- smacofMakeIndicators(thedata)
  ncat <- smacofMakeNumberOfCategories(gind)
  dmar <- smacofMakeMarginals(gind)
  if (length(yform) == 1) {
    yform <- rep(yform, nvar)
  }
  if (is.null(wmat)) {
    wmat <- smacofMakeWmat(nobj, ncat, gind)
  }
  wtot <- rowSums(sapply(wmat, rowSums))
  hini <- smacofHomogeneityHO(thedata, wmat, ndim)
  if (xnorm) {
    hini <- smacofRescaleHomogeneityHO(gind, wtot, hini$xini, ncat, xnorm)
  }
  xold <- hini$xini
  yold <- hini$yini
  if (any(yform == 1)) {
    yold <- smacofInitCategorySingle(yold, yform)
  }
  if (any(yform == 2)) {
    eval <- smacofInitCategoryCentroid(gind, dmar, wmat, yform)
  }
  dmat <- smacofDistancesHO(xold, yold)
  dhat <- smacofMonotoneRegressionHO(gind, dmat, wmat)
  sold <- smacofStressHO(dmat, dhat, wmat)
  itel <- 1
  repeat {
    zgul <- smacofGuttmanLoopHO(
      gind = gind,
      dmar = dmar,
      itel = itel,
      kitmax = kitmax,
      keps = keps,
      kverbose = kverbose,
      xitmax = xitmax,
      xeps = xeps,
      xverbose = xverbose,
      xold = xold,
      yold = yold,
      wmat = wmat,
      dhat = dhat,
      dmat = dmat,
      ndim = ndim,
      ncat = ncat,
      xnorm = xnorm,
      yform = yform
    )
    xnew <- zgul$xnew
    ynew <- zgul$ynew
    dmat <- zgul$dmat
    smid <- zgul$snew
    dhat <- smacofMonotoneRegressionHO(gind, dmat, wmat)
    snew <- smacofStressHO(dmat, dhat, wmat)
    if (verbose) {
      cat(
        "itel ",
        formatC(itel, format = "d"),
        "sold ",
        formatC(sold, digits = 10, format = "f"),
        "smid ",
        formatC(smid, digits = 10, format = "f"),
        "snew ",
        formatC(snew, digits = 10, format = "f"),
        "\n"
      )
    }
    if ((itel == itmax) || ((sold - snew) < eps)) {
      break
    }
    sold <- snew
    xold <- xnew
    yold <- ynew
    itel <- itel + 1
  }
  h <- list(
    x = xnew,
    y = ynew,
    thedata = thedata,
    gind = gind,
    dmat = dmat,
    dhat = dhat,
    wmat = wmat,
    stress = snew,
    itel = itel
  )
  return(h)
}
smacofHomogeneityHO <- function(thedata,
                                wmat = NULL,
                                ndim = 2) {
  gind <- smacofMakeIndicators(thedata)
  nvar <- length(gind)
  nobj <- nrow(gind[[1]])
  ncat <- smacofMakeNumberOfCategories(gind)
  if (is.null(wmat)) {
    wmat <- smacofMakeWmat(nobj, ncat, gind)
  }
  wred <- as.list(1:nvar)
  dmar <- as.list(1:nvar)
  wsum <- rep(0, nobj)
  for (j in 1:nvar) {
    wred[[j]] <- rowSums(gind[[j]] * wmat[[j]])
    wsum <- wsum + wred[[j]]
    dmar[[j]] <- colSums(wred[[j]] * gind[[j]] ^ 2)
  }
  zini <- smacofAnalyzeBurt(gind, wred, wsum, dmar, ndim, ncat) 
  return(list(xini = zini$xini, yini = zini$yini, gind = gind, thedata = thedata))
}

smacofAnalyzeBurt <- function(gind, wred, wsum, dmar, ndim, ncat) {
  nvar <- length(gind)
  nobj <- nrow(gind[[1]])
  tcat <- sum(ncat)
  burt <- matrix(0, tcat, tcat)
  k <- 0
  for (i in 1:nvar) {
    l <- 0
    for (j in 1:nvar) {
      cmat <- crossprod(wred[[i]] * gind[[i]], wred[[j]] * gind[[j]] / wsum)
      burt[k + 1:ncat[i], l + 1:ncat[j]] <-
        cmat / outer(sqrt(dmar[[i]]), sqrt(dmar[[j]]))
      l <- l + ncat[[j]]
    }
    k <- k + ncat[i]
  }
  ebrt <- slanczos(burt, ndim + 1)
  lvec <- ebrt$vectors[, -1]
  lval <- ebrt$values[-1]
  yini <- as.list(1:nvar)
  kini <- matrix(0, nobj, ndim)
  l <- 0
  for (j in 1:nvar) {
    lind <- lvec[l + 1:ncat[[j]], ]
    hh <- wred[[j]] * gind[[j]] / sqrt(outer(wsum, dmar[[j]]))
    kini <- kini + hh %*% lind
    yini[[j]] <- lind * outer(1 / sqrt(dmar[[j]]), sqrt(lval))
    l <- l + ncat[[j]]
  }
  xini <- kini / sqrt(outer(wsum, lval))
  return(list(xini = xini, yini = yini))
}


smacofRescaleHomogeneityHO <- function(gind, wtot, xini, ncat, xnorm) {
  nobj <- nrow(xini)
  ndim <- ncol(xini)
  nvar <- length(gind)
  pmat <- crossprod(xini, wtot * xini)
  if (xnorm == 1) {
    xini <- xini / sqrt(sum(diag(pmat)))
  }
  if (xnorm == 2) {
    xini <- qr.Q(qr(xini / sqrt(wtot))) / sqrt(wtot)
  }
  yini <- lapply(1:nvar, function(j) matrix(0, ncat[j], ndim))
  for (j in 1:nvar) {
    yini[[j]] <- qr.solve(gind[[j]], xini)
  }
  return(list(xini = xini, yini = yini))
}smacofInitCategoryCentroid <- function(gind, dmar, wmat, yform) {
  nvar <- length(gind)
  nobj <- nrow(gind[[1]])
  umat <- matrix(0, nobj, nobj)
  wtot <- rep(0, nobj)
  for (j in 1:nvar) {
    ww <- wmat[[j]]
    rw <- rowSums(ww)
    wtot <- wtot + rw
    if (yform[[j]] == 2) {
      cw <- colSums(ww)
      hw <- t(gind[[j]]) / dmar[[j]]
      wh <- ww %*% hw
      umat <- umat + diag(rw) + crossprod(hw, cw * hw)
      umat <- umat - wh - t(wh) 
    }
  }
  eval <- slanczos(umat / sqrt(outer(wtot, wtot)), 1)$values
  return(eval)
}

smacofInitCategorySingle <- function(yold, yform) {
  nvar <- length(yold)
  ndim <- ncol(yold[[1]])
  ncat <- sapply(yold, nrow)
  ysin <- yold
  for (j in 1:nvar) {
    if (yform[j] == 1) {
      syol <- svd(yold[[j]])
      ysin[[j]] <- outer(syol$u[, 1], syol$v[, 1]) * syol$d[1]
    }
  }
  return(ysin)
}

smacofMonotoneRegressionHO <- function(gind, dmat, wmat) {
  nvar <- length(gind)
  nobj <- nrow(gind[[1]])
  dhat <- as.list(1:nvar)
  for (j in 1:nvar) {
    ncat <- ncol(gind[[j]])
    dmaj <- dmat[[j]]
    gmaj <- gind[[j]]
    wmaj <- wmat[[j]]
    dhat[[j]] <- matrix(0, nobj, ncat)
    for (i in 1:nobj) {
      d <- dmaj[i, ]
      w <- wmaj[i, ]
      r <- which(gmaj[i, ] == 1)
      s <- dmat[[j]][i, r] == min(dmat[[j]][i, ])
      if ((length(r) == 0) || s) {
        dhat[[j]][i, ] <- dmat[[j]][i, ]
      } else {
        dhat[[j]][i, ] <- smacofTreeRegression(r, d, w)
      }
    }
  }
  return(dhat)
}

smacofTreeRegression <- function(r, d, w) {
  ncat <- length(d)
  mcat <- 1:ncat
  dhat <- rep(0, ncat)
  ordr <- order(d[-r])
  indi <- mcat[-r][ordr]
  daux <- c(d[r], d[-r][ordr])
  waux <- c(w[r], w[-r][ordr])
  if (max(waux) == 0) {
    dhat[c(r, indi)] <- daux
  } else {
    daux <- smacofPoolAdjacentViolaters(daux, waux)
    dhat[c(r, indi)] <- daux
  }
  return(dhat)
}

smacofPoolAdjacentViolaters <-
  function(x,
           w = rep(1, length(x)),
           block = weighted.mean) {
    is.up.satisfied <- function(x, i)
      (i == length(x)) || (x[i] <= x[i + 1])
    is.down.satisfied <- function(x, i)
      (i == 1) || (x[i - 1] <= x[i])
    put.back <- function(n, blocklist, blockvalues) {
      x <- rep(0, n)
      nb <- length(blockvalues)
      for (i in 1:nb) {
        x[blocklist[i, 1]:blocklist[i, 2]] <- blockvalues[i]
      }
      return(x)
    }
    merge.block.up <-
      function(blocklist, blockvalues, x, w, i, block) {
        n <- length(blockvalues)
        nn <- 1:n
        ii <- which(i + 1 != nn)
        blocklist[i, ] <- c(blocklist[i, 1], blocklist[i + 1, 2])
        indi <- blocklist[i, 1]:blocklist[i + 1, 2]
        blockvalues[i] <- block(x[indi], w[indi])
        blocklist <- blocklist[ii, ]
        if (length(ii) == 1)
          dim(blocklist) <- c(1, 2)
        blockvalues <- blockvalues[ii]
        list(v = blockvalues, l = blocklist)
      }
    nblock <- length(x)
    n <- length(x)
    blocklist <- array(1:n, c(n, 2))
    blockvalues <- x
    active <- 1
    repeat {
      if (!is.up.satisfied(blockvalues, active)) {
        blockmerge <-
          merge.block.up(blocklist, blockvalues, x, w, active, block)
        blockvalues <- blockmerge$v
        blocklist <- blockmerge$l
        nblock <- nblock - 1
        while (!is.down.satisfied(blockvalues, active)) {
          blockmerge <-
            merge.block.up(blocklist, blockvalues, x, w, active - 1, block)
          blockvalues <- blockmerge$v
          blocklist <- blockmerge$l
          nblock <- nblock - 1
          active <- active - 1
        }
      }
      else if (active == nblock)
        break()
      else
        active <- active + 1
    }
    put.back(n, blocklist, blockvalues)
  }

smacofJointPlotsHO <- function(h,
                               jvar = NULL,
                               dim1 = 1,
                               dim2 = 2,
                               xpch = 16,
                               ypch = 8,
                               xcol = "BLUE",
                               ycol = "RED",
                               xcex = 1,
                               ycex = 1.5,
                               voronoi = FALSE,
                               stars = FALSE,
                               objects = FALSE,
                               offa = .1,
                               digs = 6,
                               clabels = 0,
                               xlabels = 0,
                               ylabels = 0,
                               labels = NULL) {
  par(pty = "s")
  dimlab1 <- paste("dimension ", as.character(dim1))
  dimlab2 <- paste("dimension ", as.character(dim2))
  tdim <- c(dim1, dim2)
  x <- h$x[, tdim]
  y <- lapply(h$y, function(x)
    x[, tdim])
  nvar <- length(y)
  nobj <- nrow(x)
  if (is.null(jvar)) {
    jj <- 1:nvar
  } else {
    jj <- jvar
  }
  for (j in jj) {
    if (ylabels) {
      main <- names(h$thedata)[j]
    } else {
      main <- paste("variable", formatC(j, format = "d"))
    }
    yy <- unique(signif(y[[j]], digs))
    if (voronoi && (nrow(yy) > 1)) {
      omin <- min(x, yy)
      omax <- max(x, yy)
      offa <- offa * (omax - omin)
      upfa <- omax + offa
      lwfa <- omin - offa
      ztls <- tile.list(deldir(yy, rw = c(lwfa, upfa, lwfa, upfa)))
      # spfr <- voronoi(yy, ext = c(lwfa, upfa, lwfa, upfa))
      plot(ztls,
        xlab = dimlab1,
        ylab = dimlab2,
        main = main,
        cex = ycex,
        pch = ypch
     )
    } else {
      plot(
        rbind(x, y[[j]]),
        type = "n",
        main = main,
        xlab = dimlab1,
        ylab = dimlab2
      )
    }
    if (clabels) {
      text(y[[j]],
           as.character(unique(h$thedata[, j])),
           col = ycol,
           cex = ycex)
    } else {
      points(y[[j]],
             pch = ypch,
             col = ycol,
             cex = ycex)
    }
    if (objects) {
      if (!is.null(labels)) {
        text(x, labels, col = xcol, cex = xcex)
      } else {
        if (xlabels == 0) {
          points(x,
                 pch = xpch,
                 col = xcol,
                 cex = xcex)
        }
        if (xlabels == 1) {
          text(x,
               as.character(1:nobj),
               col = xcol,
               cex = xcex)
        }
        if (xlabels == 2) {
          text(x,
               row.names(h$thedata),
               col = xcol,
               cex = xcex)
        }
        if (xlabels == 3) {
          text(x,
               as.character(h$thedata[, j]),
               col = xcol,
               cex = xcex)
        }
      }
    }
    if (stars) {
      for (i in 1:nobj) {
        l <- which(h$gind[[j]][i, ] == 1)
        if (length(l) == 0) {
          next
        }
        yy <- y[[j]][l, ]
        lines(matrix(c(x[i, ], yy), 2, 2, byrow = TRUE))
      }
    }
  }
}

smacofObjectsPlotHO <- function(h,
                             dim1 = 1,
                             dim2 = 2,
                             pch = 16,
                             col = "BLUE",
                             cex = 1,
                             main = "Object Plot",
                             xlabels = 0,
                             labels = NULL) {
  nobj <- nrow(h$x)
  par(pty = "s")
  dimlab1 <- paste("dimension ", as.character(dim1))
  dimlab2 <- paste("dimension ", as.character(dim2))
  tdim <- c(dim1, dim2)
  x <- (h$x)[, tdim]
  plot(
    x,
    type = "n",
    main = main,
    xlab = dimlab1,
    ylab = dimlab2
  )
  if (!is.null(labels)) {
    text(x, labels, col = col, cex = cex)
  } else {
    if (xlabels == 0) {
      points(x,
             pch = pch,
             col = col,
             cex = cex)
    }
    if (xlabels == 1) {
      text(x, as.character(1:nobj), col = col, cex = cex)
    }
    if (xlabels == 2) {
      text(x, row.names(h$thedata), col = col, cex = cex)
    }
  }
}

smacofCategoriesPlotHO <- function(h,
                                 jvar = NULL,
                                 dim1 = 1,
                                 dim2 = 2,
                                 pch = 8,
                                 cex = 1,
                                 col = "RED",
                                 main = "Category Plot",
                                 labels = FALSE,
                                 offa = .1) {
  nvar <- length(h$y)
  par(pty = "s")
  omax <- max(sapply(h$y, max))
  omin <- max(sapply(h$y, min))
  offa <- offa * (omax - omin)
  dimlab1 <- paste("dimension ", as.character(dim1))
  dimlab2 <- paste("dimension ", as.character(dim2))
  tdim <- c(dim1, dim2)
  if (is.null(jvar)) {
    jj <- 1:nvar
  } else {
    jj <- jvar
  }
  plot(
    h$y[[1]][, tdim],
    xlim = c(omin - offa, omax + offa),
    ylim = c(omin - offa, omax + offa),
    xlab = dimlab1,
    ylab = dimlab2,
    main = main,
    type = "n"
  )
  for (j in jj) {
    yy <- h$y[[j]][, tdim]
    ny <- nrow(yy)
    if (!labels) {
      points(yy,
             pch = pch,
             cex = cex,
             col = col)
    } else {
      for (l in 1:ny) {
        lb <- paste(j, ":", l, sep = "")
        text(
          x = yy[l, dim1],
          y = yy[l, dim2],
          lb,
          cex = cex,
          col = col
        )
      }
    }
  }
}
smacofDistancesHO <- function(x, y) {
  nvar <- length(y)
  dmat <- as.list(1:nvar)
  rx <- rowSums(x ^ 2)
  for (j in 1:nvar) {
    dd <- outer(rx, rowSums(y[[j]] ^ 2), "+") - 2 * tcrossprod(x, y[[j]])
    dmat[[j]] <- sqrt(abs(dd))
  }
  return(dmat)
}

smacofStressHO <- function(dmat, dhat, wmat) {
  nvar <- length(dmat)
  s <- 0.0
  for (j in 1:nvar) {
    s <- s + sum(wmat[[j]] * (dmat[[j]] - dhat[[j]]) ^ 2)
  }
  return(s)
}

smacofMakeBmatHO <- function(dmat, dhat, wmat) {
  nvar <- length(dmat)
  bmat <- as.list(1:nvar)
  for (j in 1:nvar) {
    frak <- ifelse(dmat[[j]] == 0, 0, dhat[[j]] / dmat[[j]])
    bmat[[j]] <- wmat[[j]] * frak
  }
  return(bmat)
}
smacofExpandMatrix <- function(x) {
  nr <- nrow(x)
  nc <- ncol(x)
  nt <- nr + nc
  nn <- 1:nr
  mm <- nr + 1:nc
  xx <- matrix(0, nt, nt)
  xx[nn, mm] <- x
  xx[mm, nn] <- t(x)
  xx[nn, nn] <- diag(-rowSums(x))
  xx[mm, mm] <- diag(-colSums(x))
  return(-xx)
}

smacofCenter <- function(x) {
  x <- apply(x, 2, function(x)
    x - mean(x))
  return(x)
}


smacofMakeIndicators <- function(thedata) {
  m <- ncol(thedata)
  g <- rep(list(NULL), m)
  for (j in 1:m) {
    h <- thedata[, j]
    r <- is.na(h)
    f <- unique(h[!r])
    g[[j]] <- ifelse(outer(h, f, "=="), 1, 0)
    g[[j]][r, ] <- 0
  }
  return(g)
}

smacofMakeNumberOfCategories <- function(g) {
  k <- lapply(g, function(x)
    ncol(x))
  return(unlist(k))
}

smacofMakeMarginals <- function(g) {
  d <- lapply(g, function(x)
    colSums(x))
  return(d)
}

smacofMakeWmat <- function(nobj, ncat, gind) {
  nvar <- length(ncat)
  wmat <- rep(list(NULL), nvar)
  for (j in 1:nvar) {
    r <- rowSums(gind[[j]])
    wmat[[j]] <- r * matrix(1, nobj, ncat[j])
  }
  return(wmat)
}

smacofConvertCrossTable <- function(x) {
  nr <- nrow(x)
  nc <- ncol(x)
  wvec <- c()
  thedata <- c()
  for (i in 1:nr) {
    for (j in 1:nc) {
      thedata <- rbind(thedata, c(i, j))
      wvec <- c(wvec, x[i, j])
    }
  }
  wmat <- as.list(1:2)
  nmat <- length(wvec)
  wmat[[1]] <- wvec * matrix(1, nmat, nr)
  wmat[[2]] <- wvec * matrix(1, nmat, nc)
  return(list(thedata = thedata, wmat = wmat))
}

smacofPredictionTable <- function(h) {
  nvar <- length(h$gind)
  nobj <- nrow(h$gind[[1]])
  dmat <- smacofDistancesHO(h$x, h$y)
  tab <- matrix(0, nobj, nvar)
  for (j in 1:nvar) {
    for (i in 1:nobj) {
      dmaj <- dmat[[j]][i, ]
      gmaj <- h$gind[[j]][i, ]
      r <- which(gmaj == 1)
      if (length(r) == 0) {
        tab[i, j] <- NA
      } else {
        if (dmaj[r] == min(dmaj)) {
          tab[i, j] <- tab[i, j] + 1
        }
      }
    }
  }
  return(tab)
}
small <-
structure(list(first = c("a", "b", "a", "a", "b", "c", "a", "a", 
"c", "a"), second = c("p", "q", "r", "p", "p", "p", "p", "p", 
"p", "p"), third = c("u", "v", "v", "u", "v", "v", "u", "v", 
"v", "v")), class = "data.frame", row.names = c("01", "02", "03", 
"04", "05", "06", "07", "08", "09", "10"))
